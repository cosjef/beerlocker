
// packages get defined here
// routes get defined here
// endpoint handlers are defined here

// Start mongodb manually using Brew on a Mac
// mongod --config /usr/local/etc/mongod.conf &

// Start node application with: nodemon server.js
// Start with node-inspector debugger: node-inspector & nodemon --debug ./server.js
// http://127.0.0.1:8080/?port=5858


// Get the packages we need
// Load required packages
// Load the controllers we need as well
var express = require('express');
var mongoose = require('mongoose');
var bodyParser = require('body-parser');
var passport = require('passport');
var beerController = require('./controllers/beer');
var userController = require('./controllers/user');
var authController = require('./controllers/auth');
var clientController = require('./controllers/client');
var ejs = require('ejs');
var session = require('express-session');
var oauth2Controller = require('./controllers/oauth2')

// Connect to the beerlocker MongoDB
mongoose.Promise = global.Promise
mongoose.connect('mongodb://localhost:27017/beerlocker');

// Create our Express application
var app = express();

// Set view engine to ejs
app.set('view engine', 'ejs');


// Use the body-parser package in our application
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  extended: true
}));

// Use express session support since OAuth2orize requires it
app.use(session({
  secret: "Super Secret Session Key",
  saveUninitialized: true,
  resave: true
}));

// Use express session support since OAuth2orize requires it
app.use(session({
  secret: 'Super Secret Session Key',
  saveUninitialized: true,
  resave: true
}))


// Use the passport package in our application
app.use(passport.initialize());

// Create our Express router
var router = express.Router();

// Create endpoint handlers for /beers
router.route('/beers')
  .post(authController.isAuthenticated, beerController.postBeers)
  .get(authController.isAuthenticated, beerController.getBeers);

// Create endpoint handlers for /beers/:beer_id
router.route('/beers/:beer_id')
  .get(authController.isAuthenticated, beerController.getBeer)
  .put(authController.isAuthenticated, beerController.putBeer)
  .delete(authController.isAuthenticated, beerController.deleteBeer);

// Create endpoint handlers for /users
router.route('/users')
  .post(userController.postUsers)
  .get(authController.isAuthenticated, userController.getUsers);

 // Create endpoint handlers for /clients
router.route('/clients')
  .post(authController.isAuthenticated, clientController.postClients)
  .get(authController.isAuthenticated, clientController.getClients);

// Create endpoint handlers for oauth2 authorize endpoint
router.route('/oauth2/authorize')
  .post(authController.isAuthenticated, oauth2Controller.decision) 
  .get(authController.isAuthenticated, oauth2Controller.authorization)


   // Create endpoint handlers for oauth2 token
  router.route('/oauth2/token')
  .post(authController.isClientAuthenticated, oauth2Controller.token);


// Register all our routes with /api
app.use('/api', router);

// Start the server
app.listen(3000);
