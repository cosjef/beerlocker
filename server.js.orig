
// packages get defined here
// routes get defined here
// endpoint handlers are defined here

// Start mongodb manually using Brew on a Mac
// mongod --config /usr/local/etc/mongod.conf &

// Start node application with: nodemon server.js
// Start with node-inspector debugger: node-inspector & nodemon --debug ./server.js
// http://127.0.0.1:8080/?port=5858


// Get the packages we need
// Load required packages
var express = require('express');
var mongoose = require('mongoose');
var Beer = require('./models/beer');
var bodyParser = require('body-parser')
var userController = require('./controllers/user');
var beerController = require('./controllers/beer');
var passport = require('passport');
var authController = require('./controllers/auth');

// Connect to the beerlocker MongoDB instance
mongoose.Promise = global.Promise
mongoose.connect('mongodb://localhost:27017/beerlocker');

// Create our Express application
var app = express();

// Use the body-parser package in our application
// body-parser is express middleware that extract the entire body portion of an incoming request stream 
// and exposes it on req.body as something easier to interface with
app.use(bodyParser.urlencoded({
	extended: true
}))

// Use the passport package in our application
app.use(passport.initialize());

// Use environment-defined port or port 3000
var port = process.env.PORT || 3000;

// Create our Express router
var router = express.Router();


// Create endpoint handlers for /beers
router.route('/beers')
	.post(authController.isAuthenticated, beerController.postBeers)
	.get(authController.isAuthenticated, beerController.getBeers);

// Create endpoint handlers for /beers/:beer_id
router.route('/beers/beer_id')
  .get(authController.isAuthenticated, beerController.getBeer)
  .put(authController.isAuthenticated, beerController.putBeer)
  .delete(authController.isAuthenticated, beerController.deleteBeer);


// Create endpoint handler for /users
router.route('/users')
   .post(userController.postUsers)
   .get(authController.isAuthenticated, userController.getUsers);


// Register all our routes with /api 
app.use('/api', router);

//Start the server
app.listen(port);
console.log('Insert beer on port ' + port);



